import { useState } from 'react';
import { useUser } from './useUser'; // Custom hook to retrieve user and token data
import { PlanStep } from '../types'; // Type for plan steps

// Custom hook for managing steps within a plan
export function useStepManagement(
  planId: string | undefined, // The ID of the plan to manage
  refetchPlan: () => Promise<void> // Function to refetch the plan data after operations
) {
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false); // State to track the visibility of the delete confirmation modal
  const [stepToDelete, setStepToDelete] = useState<PlanStep | null>(null); // State to track which step is selected for deletion
  const { token } = useUser(); // Retrieve the user's authentication token from the useUser hook

  // Function to add a new step to the plan
  const addStep = async () => {
    if (!token || !planId) return; // Ensure user is authenticated and planId is provided

    const newStep: Omit<PlanStep, 'planStepId'> = {
      // Define a new step object without the planStepId, which will be generated by the server
      userPlanId: parseInt(planId),
      templateId: null, // No template ID for manually created steps
      stepDescription: 'Add step details here', // Placeholder description
      dueDate: new Date().toISOString().split('T')[0], // Default due date set to today
      completed: false, // Mark step as not completed by default
      completedAt: null, // No completion date for uncompleted steps
      createdAt: new Date().toISOString(), // Record the creation time
      stepOrder: 1, // Default order for the new step
    };

    try {
      // Send a POST request to create a new step in the plan
      const response = await fetch(`/api/plans/${planId}/steps`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`, // Include token for authentication
        },
        body: JSON.stringify(newStep), // Send the new step data as JSON
      });

      if (!response.ok) {
        // If the response status is not OK, throw an error
        throw new Error('Failed to add new step');
      }

      await refetchPlan(); // Refetch the plan data after successfully adding the step
    } catch (err) {
      console.error('Error adding step:', err);
      throw new Error('Failed to add new step. Please try again.'); // Rethrow the error for UI-level handling
    }
  };

  // Function to update an existing step's field (e.g., description or completion status)
  const updateStep = async (
    stepId: number, // ID of the step to update
    field: keyof PlanStep, // The specific field of the step to update (e.g., stepDescription, completed)
    value: string | boolean // The new value for the field
  ) => {
    if (!token || !planId) return; // Ensure user is authenticated and planId is provided

    try {
      // Send a PUT request to update the step
      const response = await fetch(`/api/plans/${planId}/steps/${stepId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`, // Include token for authentication
        },
        body: JSON.stringify({
          [field]: value, // Dynamically set the updated field and value
          completedAt:
            field === 'completed' && value ? new Date().toISOString() : null, // If marking step as completed, record the completion time
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to update step');
      }

      await refetchPlan(); // Refetch the plan data after successfully updating the step
    } catch (err) {
      console.error('Error updating step:', err); // Log any error to the console
      throw new Error('Failed to update step. Please try again.'); // Rethrow the error for UI-level handling
    }
  };

  // Function to delete a step from the plan
  const deleteStep = async (stepId: number | undefined) => {
    if (!token || !planId || !stepId) return; // Ensure user is authenticated, planId and stepId are provided

    try {
      // Send a DELETE request to remove the step
      const response = await fetch(`/api/plans/${planId}/steps/${stepId}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${token}`, // Include token for authentication
        },
      });

      if (!response.ok) {
        throw new Error('Failed to delete step');
      }

      // Close the delete modal and clear the step selected for deletion
      setIsDeleteModalOpen(false);
      setStepToDelete(null);
      await refetchPlan(); // Refetch the plan data after successfully deleting the step
    } catch (err) {
      console.error('Error deleting step:', err); // Log any error to the console
      throw new Error('Failed to delete step. Please try again.'); // Rethrow the error for UI-level handling
    }
  };

  // Return all step management functions and relevant state variables
  return {
    addStep, // Function to add a new step
    updateStep, // Function to update an existing step
    deleteStep, // Function to delete a step
    isDeleteModalOpen, // Boolean to track whether the delete modal is open
    setIsDeleteModalOpen, // Function to toggle the delete modal
    stepToDelete, // The step selected for deletion
    setStepToDelete, // Function to set the step to delete
  };
}
